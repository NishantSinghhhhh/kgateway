// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// MCPAuthPolicySpecApplyConfiguration represents a declarative configuration of the MCPAuthPolicySpec type for use
// with apply.
type MCPAuthPolicySpecApplyConfiguration struct {
	TargetRefs []LocalPolicyTargetReferenceApplyConfiguration `json:"targetRefs,omitempty"`
	Rules      []MCPAuthPolicyRuleApplyConfiguration          `json:"rules,omitempty"`
}

// MCPAuthPolicySpecApplyConfiguration constructs a declarative configuration of the MCPAuthPolicySpec type for use with
// apply.
func MCPAuthPolicySpec() *MCPAuthPolicySpecApplyConfiguration {
	return &MCPAuthPolicySpecApplyConfiguration{}
}

// WithTargetRefs adds the given value to the TargetRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TargetRefs field.
func (b *MCPAuthPolicySpecApplyConfiguration) WithTargetRefs(values ...*LocalPolicyTargetReferenceApplyConfiguration) *MCPAuthPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargetRefs")
		}
		b.TargetRefs = append(b.TargetRefs, *values[i])
	}
	return b
}

// WithRules adds the given value to the Rules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Rules field.
func (b *MCPAuthPolicySpecApplyConfiguration) WithRules(values ...*MCPAuthPolicyRuleApplyConfiguration) *MCPAuthPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRules")
		}
		b.Rules = append(b.Rules, *values[i])
	}
	return b
}
