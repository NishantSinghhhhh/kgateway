// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "sigs.k8s.io/gateway-api/apis/v1"
)

// AccessLogGrpcServiceApplyConfiguration represents a declarative configuration of the AccessLogGrpcService type for use
// with apply.
type AccessLogGrpcServiceApplyConfiguration struct {
	CommonAccessLogGrpcServiceApplyConfiguration `json:",inline"`
	AdditionalRequestHeadersToLog                []string `json:"additionalRequestHeadersToLog,omitempty"`
	AdditionalResponseHeadersToLog               []string `json:"additionalResponseHeadersToLog,omitempty"`
	AdditionalResponseTrailersToLog              []string `json:"additionalResponseTrailersToLog,omitempty"`
}

// AccessLogGrpcServiceApplyConfiguration constructs a declarative configuration of the AccessLogGrpcService type for use with
// apply.
func AccessLogGrpcService() *AccessLogGrpcServiceApplyConfiguration {
	return &AccessLogGrpcServiceApplyConfiguration{}
}

// WithBackendRef sets the BackendRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackendRef field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithBackendRef(value v1.BackendRef) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonGrpcServiceApplyConfiguration.BackendRef = &value
	return b
}

// WithAuthority sets the Authority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authority field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithAuthority(value string) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonGrpcServiceApplyConfiguration.Authority = &value
	return b
}

// WithMaxReceiveMessageLength sets the MaxReceiveMessageLength field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxReceiveMessageLength field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithMaxReceiveMessageLength(value uint32) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonGrpcServiceApplyConfiguration.MaxReceiveMessageLength = &value
	return b
}

// WithSkipEnvoyHeaders sets the SkipEnvoyHeaders field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipEnvoyHeaders field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithSkipEnvoyHeaders(value bool) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonGrpcServiceApplyConfiguration.SkipEnvoyHeaders = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithTimeout(value metav1.Duration) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonGrpcServiceApplyConfiguration.Timeout = &value
	return b
}

// WithInitialMetadata adds the given value to the InitialMetadata field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InitialMetadata field.
func (b *AccessLogGrpcServiceApplyConfiguration) WithInitialMetadata(values ...*HeaderValueApplyConfiguration) *AccessLogGrpcServiceApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInitialMetadata")
		}
		b.CommonGrpcServiceApplyConfiguration.InitialMetadata = append(b.CommonGrpcServiceApplyConfiguration.InitialMetadata, *values[i])
	}
	return b
}

// WithRetryPolicy sets the RetryPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryPolicy field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithRetryPolicy(value *RetryPolicyApplyConfiguration) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonGrpcServiceApplyConfiguration.RetryPolicy = value
	return b
}

// WithLogName sets the LogName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogName field is set to the value of the last call.
func (b *AccessLogGrpcServiceApplyConfiguration) WithLogName(value string) *AccessLogGrpcServiceApplyConfiguration {
	b.CommonAccessLogGrpcServiceApplyConfiguration.LogName = &value
	return b
}

// WithAdditionalRequestHeadersToLog adds the given value to the AdditionalRequestHeadersToLog field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalRequestHeadersToLog field.
func (b *AccessLogGrpcServiceApplyConfiguration) WithAdditionalRequestHeadersToLog(values ...string) *AccessLogGrpcServiceApplyConfiguration {
	for i := range values {
		b.AdditionalRequestHeadersToLog = append(b.AdditionalRequestHeadersToLog, values[i])
	}
	return b
}

// WithAdditionalResponseHeadersToLog adds the given value to the AdditionalResponseHeadersToLog field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalResponseHeadersToLog field.
func (b *AccessLogGrpcServiceApplyConfiguration) WithAdditionalResponseHeadersToLog(values ...string) *AccessLogGrpcServiceApplyConfiguration {
	for i := range values {
		b.AdditionalResponseHeadersToLog = append(b.AdditionalResponseHeadersToLog, values[i])
	}
	return b
}

// WithAdditionalResponseTrailersToLog adds the given value to the AdditionalResponseTrailersToLog field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalResponseTrailersToLog field.
func (b *AccessLogGrpcServiceApplyConfiguration) WithAdditionalResponseTrailersToLog(values ...string) *AccessLogGrpcServiceApplyConfiguration {
	for i := range values {
		b.AdditionalResponseTrailersToLog = append(b.AdditionalResponseTrailersToLog, values[i])
	}
	return b
}
