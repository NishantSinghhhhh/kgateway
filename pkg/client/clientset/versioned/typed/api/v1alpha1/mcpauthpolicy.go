// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"

	applyconfigurationapiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/applyconfiguration/api/v1alpha1"
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
	scheme "github.com/kgateway-dev/kgateway/v2/pkg/client/clientset/versioned/scheme"
)

// MCPAuthPoliciesGetter has a method to return a MCPAuthPolicyInterface.
// A group's client should implement this interface.
type MCPAuthPoliciesGetter interface {
	MCPAuthPolicies(namespace string) MCPAuthPolicyInterface
}

// MCPAuthPolicyInterface has methods to work with MCPAuthPolicy resources.
type MCPAuthPolicyInterface interface {
	Create(ctx context.Context, mCPAuthPolicy *apiv1alpha1.MCPAuthPolicy, opts v1.CreateOptions) (*apiv1alpha1.MCPAuthPolicy, error)
	Update(ctx context.Context, mCPAuthPolicy *apiv1alpha1.MCPAuthPolicy, opts v1.UpdateOptions) (*apiv1alpha1.MCPAuthPolicy, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, mCPAuthPolicy *apiv1alpha1.MCPAuthPolicy, opts v1.UpdateOptions) (*apiv1alpha1.MCPAuthPolicy, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.MCPAuthPolicy, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.MCPAuthPolicyList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.MCPAuthPolicy, err error)
	Apply(ctx context.Context, mCPAuthPolicy *applyconfigurationapiv1alpha1.MCPAuthPolicyApplyConfiguration, opts v1.ApplyOptions) (result *apiv1alpha1.MCPAuthPolicy, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, mCPAuthPolicy *applyconfigurationapiv1alpha1.MCPAuthPolicyApplyConfiguration, opts v1.ApplyOptions) (result *apiv1alpha1.MCPAuthPolicy, err error)
	MCPAuthPolicyExpansion
}

// mCPAuthPolicies implements MCPAuthPolicyInterface
type mCPAuthPolicies struct {
	*gentype.ClientWithListAndApply[*apiv1alpha1.MCPAuthPolicy, *apiv1alpha1.MCPAuthPolicyList, *applyconfigurationapiv1alpha1.MCPAuthPolicyApplyConfiguration]
}

// newMCPAuthPolicies returns a MCPAuthPolicies
func newMCPAuthPolicies(c *GatewayV1alpha1Client, namespace string) *mCPAuthPolicies {
	return &mCPAuthPolicies{
		gentype.NewClientWithListAndApply[*apiv1alpha1.MCPAuthPolicy, *apiv1alpha1.MCPAuthPolicyList, *applyconfigurationapiv1alpha1.MCPAuthPolicyApplyConfiguration](
			"mcpauthpolicies",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.MCPAuthPolicy { return &apiv1alpha1.MCPAuthPolicy{} },
			func() *apiv1alpha1.MCPAuthPolicyList { return &apiv1alpha1.MCPAuthPolicyList{} },
		),
	}
}
